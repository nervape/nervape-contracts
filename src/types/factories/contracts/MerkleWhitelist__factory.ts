/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../common";
import type {
  MerkleWhitelist,
  MerkleWhitelistInterface,
} from "../../contracts/MerkleWhitelist";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
    ],
    name: "setMerkleRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61048c8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80637cb64759116100505780637cb64759146100c05780638da5cb5b146100d3578063f2fde38b146100ee57600080fd5b80632eb4a7ab146100775780635a23dd9914610093578063715018a6146100b6575b600080fd5b61008060015481565b6040519081526020015b60405180910390f35b6100a66100a1366004610386565b610101565b604051901515815260200161008a565b6100be61015d565b005b6100be6100ce36600461040c565b610171565b6000546040516001600160a01b03909116815260200161008a565b6100be6100fc366004610425565b61017e565b600080846001600160a01b031660001b9050610154848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506001549150849050610213565b95945050505050565b610165610229565b61016f6000610283565b565b610179610229565b600155565b610186610229565b6001600160a01b0381166102075760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61021081610283565b50565b60008261022085846102eb565b14949350505050565b6000546001600160a01b0316331461016f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101fe565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815b84518110156103305761031c8286838151811061030f5761030f610440565b6020026020010151610338565b91508061032881610456565b9150506102f0565b509392505050565b6000818310610354576000828152602084905260409020610363565b60008381526020839052604090205b9392505050565b80356001600160a01b038116811461038157600080fd5b919050565b60008060006040848603121561039b57600080fd5b6103a48461036a565b9250602084013567ffffffffffffffff808211156103c157600080fd5b818601915086601f8301126103d557600080fd5b8135818111156103e457600080fd5b8760208260051b85010111156103f957600080fd5b6020830194508093505050509250925092565b60006020828403121561041e57600080fd5b5035919050565b60006020828403121561043757600080fd5b6103638261036a565b634e487b7160e01b600052603260045260246000fd5b600060001982141561047857634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a";

type MerkleWhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleWhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleWhitelist__factory extends ContractFactory {
  constructor(...args: MerkleWhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleWhitelist> {
    return super.deploy(overrides || {}) as Promise<MerkleWhitelist>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleWhitelist {
    return super.attach(address) as MerkleWhitelist;
  }
  override connect(signer: Signer): MerkleWhitelist__factory {
    return super.connect(signer) as MerkleWhitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleWhitelistInterface {
    return new utils.Interface(_abi) as MerkleWhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleWhitelist {
    return new Contract(address, _abi, signerOrProvider) as MerkleWhitelist;
  }
}
